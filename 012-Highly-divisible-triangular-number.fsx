(*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*)

let isPrime (number: int64) =
    match number with
    | 1L -> false
    | _ when number < 4L -> true
    | _ when number &&& 1 = 0 -> false
    | _ when number < 9L -> true
    | _ ->
        let sq = number |> float |> sqrt |> int64

        seq { 3L .. 2L .. sq }
        |> Seq.exists (fun i -> number % i = 0L)
        |> not

let primes =
    (fun i -> 2 * i + 1)
    |> Seq.initInfinite
    |> Seq.map int64
    |> Seq.filter isPrime

let triangleNumbers =
    let rec triangleNumbers' acc elem =
        seq {
            let currentYield = acc + elem

            yield currentYield
            yield! triangleNumbers' currentYield (elem + 1L)
        }

    triangleNumbers' 0L 1L

let sqrtCeilInt (number: int64) =
    number |> float |> sqrt |> ceil |> int64

let rec factorize number =
    seq {
        match number with
        | _ when number &&& 1L = 0 ->
            yield 2L
            yield! factorize (number / 2L)
        | _ ->
            let divisor =
                primes
                |> Seq.takeWhile ((>=) (sqrtCeilInt number))
                |> Seq.tryFind (fun i -> number % i = 0L)

            match divisor with
            | Some divisor ->
                yield divisor
                yield! factorize (number / divisor)
            | None -> yield number
    }

triangleNumbers
|> Seq.map (fun i ->
    i,
    // https://cp-algorithms.com/algebra/divisors.html
    factorize i
    |> Seq.countBy id
    |> Seq.fold (fun acc elem -> acc * ((snd elem) + 1)) 1)
|> Seq.find (fun i -> snd i > 500)
|> fst
